/// <reference types="dcl" />
/// <reference types="env" />
export declare class Moving {
    direction: string;
    mode: string;
    pos: number;
    constructor(direction: string, mode: string, pos?: number);
}
export declare class MoveSystem implements ISystem {
    positions: Vector3[];
    addCameraPosition(pos: Vector3): void;
    update(): void;
}
declare class BuilderHUD {
    isSetup: boolean;
    defaultParent: any;
    entities: {
        entity: Entity;
        transform: Transform;
        preexisting: boolean;
    }[];
    numEntities: number;
    selectedEntityIndex: number;
    rotator: any;
    selectionPointer: any;
    selectionPointerScale: number;
    selectionPointerElevation: number;
    newEntityShape: any;
    newEntityScale: number;
    modePOSITION: number;
    modeROTATION: number;
    modeSCALE: number;
    mode: number;
    snap: number;
    snapPosScale: number;
    snapRot: number;
    canvas: any;
    uiMinimizedContainer: any;
    uiMaximizedContainer: any;
    uiMaximized: boolean;
    maximizeButton: any;
    displayName: any;
    displayPRS: any;
    scaffoldTitle: any;
    qButton: any;
    wButton: any;
    eButton: any;
    aButton: any;
    sButton: any;
    dButton: any;
    modeButton: any;
    modeLabel: any;
    snapButton: any;
    snapLabel: any;
    selectPreviousButton: any;
    selectNextButton: any;
    discardItemButton: any;
    newEntitytButtonButton: any;
    saveButton: any;
    minimizeButton: any;
    engineEntities: Entity[];
    pendingEntityAdd: any;
    scaffolding: Entity;
    scaffoldU: any;
    scaffoldD: any;
    scaffoldL: any;
    scaffoldR: any;
    scaffoldF: any;
    scaffoldB: any;
    toggleLift: any;
    toggleCamera: any;
    scaffloor: Entity;
    showingColliders: boolean;
    leftWall: Entity;
    rightWall: Entity;
    frontWall: Entity;
    backWall: Entity;
    transparent: Texture;
    scaffoldScale: Vector3;
    movingSystem: MoveSystem;
    transparentMat: BasicMaterial;
    unsavedContainer: UIContainerRect;
    constructor();
    setDefaultParent(defaultParent: Entity): void;
    setupUI(): Promise<void>;
    setSnaps(): void;
    applyModeAndSnapLabels(init?: boolean): void;
    countDecimals(num: number): number;
    updateDisplayPRS(): void;
    maximizeUI(): void;
    minimizeUI(): void;
    showUI(): void;
    hideUI(): void;
    updateSelectionPointerPOS(transform: TransformConstructorArgs): void;
    selectEntity(selectedEntityIndex: number): void;
    selectPrevious(): void;
    selectNext(): void;
    discardSelected(): void;
    toggleCameraOptions(): void;
    toggleColliders(back: boolean): void;
    moveScaffold(key: string): void;
    adjustTransform(key: string): void;
    attachToEntity(entity: Entity, preexisting?: boolean): Promise<void>;
    newEntity(): void;
    round(n: number): number;
    dump(): void;
    destroy(): void;
    refreshDisplay(): void;
}
export declare class hudDelay {
    timer: number;
    hud: BuilderHUD;
    entities: Entity[];
    constructor(hud: BuilderHUD);
    pendingEntity(entity: Entity): void;
    update(dt: number): void;
}
export declare var hud: BuilderHUD;
export declare class ClickAnimationSystem {
    uiIMage: UIImage;
    timer: number;
    constructor(image: UIImage);
    update(dt: number): void;
}
export {};
